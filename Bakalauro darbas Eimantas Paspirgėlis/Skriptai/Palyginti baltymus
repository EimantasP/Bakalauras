#!/usr/local/bin/python

# Eimantas Paspirgelis, Bioinformatika 4 kursas
# Programa atlieka baltymu seku palyginima
# Naudojimas: python Palyginti

import re

countDisagreement = 0
# Ivesties seka kurios seku ieskosime
searchSeq = open("MyRastGalutinis.fa", 'r')
# Rasome rezultatus sutvarkyto failo
searchSeqRes = open("out.txt", 'w')
# Pakeiciamos anotacijos eilutes i simboli '>', tai atliekama, 	
# nes veliau bus galima faila sukarpyti pagal si simboli ir	
# turesime tik baltymo sekas, be anotacijos eiluciu		
for line in searchSeq:								
    if line[0] == '>':									
	newline = line.replace(line, '>')			
        searchSeqRes.write(newline + '\n')
    else:
	searchSeqRes.write(line)
searchSeq.close()
searchSeqRes.close()

# Pakeistas failas imamas kaip ivestis
searchSequences = open("out.txt", "r") 
# Ivesties failas kuriame ieskosime seku					
InSearchSeq = open("bacteria.faa", "r")	
# Rezultatu rasymas			
Result = open("testResult", "w")
# nuskaitomas visas tekstas ir istrinami naujos eilutes simboliai
InSearch = ''.join([line.replace('\n', '') for line in InSearchSeq.readlines()]) 									 								
Search = ''.join([line.replace('\n', '') for line in searchSequences.readlines()]) 
# Sukarpomas tekstas pagal simboli '>'
result = Search.split('>')							
m = len(result) 
# Apdorojama po viena elementa
for i in range(1,m):	
	# Paliekamos tik didziosios raides
    UpperLetter = re.sub("[^A-Z]", "", result[i])
    # Seka sukarpoma po 20 simboliu	
    SmallSeq = [UpperLetter[each:each+20]+'\n' for each in xrange(0,len(UpperLetter),20)] 
    for i in range(len(SmallSeq)):
	SubSmall = re.sub("[^A-Za-z]", "", SmallSeq[i])
	# Ieskoma mazuju seku kitame faile
	if SubSmall not in InSearch:
        # Jei nerandama pridedamas vienetas	
	    countDisagreement +=1	
        # Jei nerastu mazuju seku skaicius didesnis uz visas vieno baltymo
		# mazasias sekas, tuomet seka rasoma i faila, kaip nesutampanti seka
	    if len(SmallSeq)*0.2 < countDisagreement:		
	        Result.write(str(UpperLetter) + '\n')		
    countDisagreement=0
Result.close()
lines = []
# Istrinamos vienodos eilutes is galutinio failo
outfile = open('testResult1', 'w')						
for line in file('testResult'):
    if line not in lines:
        lines.append(line)
        outfile.write(line)
outfile.close()


